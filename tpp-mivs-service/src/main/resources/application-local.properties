server.port=9021
spring.dubbo.applicationName=MivsService
#spring.dubbo.registryAddress=multicast://224.5.6.7:1234?unicast=false
spring.dubbo.registryAddress=zookeeper://127.0.0.1:2181?backup=127.0.0.1:2182,127.0.0.1:2183
spring.dubbo.protocolName=dubbo
spring.dubbo.protocolPort=20901
spring.dubbo.timeout=60000

# mybatis_config
# mapper.xml的文件地址
spring.mybatis.mapperLocations=classpath*:com/fxbank/tpp/mivs/mapper/xml/*Mapper.xml
spring.mybatis.typeAliasesPackage=com.fxbank.tpp.mivs.entity
pagehelper.helperDialect=oracle
pagehelper.reasonable=true
pagehelper.supportMethodsArguments=true
pagehelper.params=count=countSql

#主数据库的配置
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource 
spring.datasource.driverClassName = oracle.jdbc.driver.OracleDriver
spring.datasource.url = jdbc:oracle:thin:@127.0.0.1:1521:xe
spring.datasource.username = tpp
spring.datasource.password = PLje+ox8cP/k9Zr3phLT8dFvvzVp4YxDGtiiMHAD53kp0tpVWsmaGT6pzILFAUuzWcFn+uMNRsR29IpfS4KBDA==
spring.datasource.publicKey = MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAJyo4FyzEDBUmZLwhn66wMSUx1fu80UHkMBzkewxOUZp+D+ostuos1aQS0i4SO9MTy8ZIJJXyHKvTC2gVyJfPbMCAwEAAQ==
spring.datasource.loginUsername=root
spring.datasource.loginPassword=root

#连接池的补充设置
#初始化、最小、最大
spring.datasource.initialSize = 1
spring.datasource.minIdle = 1
spring.datasource.maxActive = 5
#获取连接等待超时的时间、毫秒（1m）
spring.datasource.maxWait = 60000
#检测关闭空闲连接的间隔时间、毫秒(1m)，当空闲连接大于（minEvictableIdleTimeMillis），则关闭物理连接
spring.datasource.timeBetweenEvictionRunsMillis = 60000
#一个连接在池中最小的生存时间、毫秒(5m)
spring.datasource.minEvictableIdleTimeMillis = 300000
#监控统计拦截的filters,去掉后监控界面sql无法统计，'wall用于防火墙','log4j'用于日志
spring.datasource.druidSysFilters = stat,wall,log4j
#用于检测连接是否有效的语句
spring.datasource.validationQuery=select count(*) from dual
#检测连接的超时时间、秒
spring.datasource.validationQueryTimeout = 3
#申请连接时，空闲时间大于（timeBetweenEvictionRunsMillis）,则检测连接的有效性
spring.datasource.testWhileIdle = true
#申请连接时，检测连接的有效性（性能损耗）
spring.datasource.testOnBorrow = false
#归还连接时，检测连接的有效性（性能损耗）
spring.datasource.testOnReturn = false

spring.redis.master=mymaster
spring.redis.nodes=127.0.0.1:26379,127.0.0.1:26380,127.0.0.1:26381
# Redis数据库索引（默认为0）
spring.redis.database=2
# Redis服务器连接密码（默认为空）
spring.redis.password=P@ssw0rd
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.max_active=2
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.max_wait=-1
# 连接池中的最大空闲连接
spring.redis.max_idle=2
# 连接池中的最小空闲连接
spring.redis.min_idle=0
# 连接超时时间（毫秒）
spring.redis.timeout=1000
spring.redis.test_on_borrow=false

#最大连接数
spring.http.maxTotal=100
#并发数
spring.http.defaultMaxPerRoute=20
#创建连接的最长时间
spring.http.connectTimeout=1000
#从连接池中获取到连接的最长时间
spring.http.connectionRequestTimeout=500
#数据传输的最长时间
spring.http.socketTimeout=50000
#提交请求前测试连接是否可用
spring.http.staleConnectionCheckEnabled=true

# 加密平台服务器IP
spring.hsm.ip=HSM
#加密平台服务器端口
spring.hsm.port=31105
#加密平台报文头（默认0）
spring.hsm.hsmMsgLen=0
# 超时时间（秒）
spring.hsm.connTimeOut=5
# 连接池连接数（根据实际情况预启线程数，可以参考3.3中推荐配置建议）
spring.hsm.connNum=10
# 连接类型  0：短连接；1长连接，默认长连接
spring.hsm.connType=1
# appID 4位
spring.hsm.appID=CZBK

spring.hsm.secpay.enable=true
# 加密平台服务器IP
spring.hsm.secpay.ip=HSM2
#加密平台服务器端口
spring.hsm.secpay.port=31105
#加密平台报文头（默认0）
spring.hsm.secpay.hsmMsgLen=0
# 超时时间（秒）
spring.hsm.secpay.connTimeOut=5
# 连接池连接数（根据实际情况预启线程数，可以参考3.3中推荐配置建议）
spring.hsm.secpay.connNum=10
# 连接类型  0：短连接；1长连接，默认长连接
spring.hsm.secpay.connType=1
# appID 4位
spring.hsm.secpay.appID=CZBK