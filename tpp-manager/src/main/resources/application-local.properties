server.port=5000
server.servlet.context-path=/cap
spring.dubbo.applicationName=CapManager
#spring.dubbo.registryAddress=multicast://224.5.6.7:1234?unicast=false
spring.dubbo.registryAddress=zookeeper://127.0.0.1:2181

#关闭thymeleaf缓存 开发时使用 否则没有实时画面
spring.thymeleaf.cache=false
# 检查模板是否存在，然后再呈现
spring.thymeleaf.check-template-location=true
#Content-Type值
spring.thymeleaf.content-type=text/html
#启用MVC Thymeleaf视图分辨率
spring.thymeleaf.enabled=true
## 应该从解决方案中排除的视图名称的逗号分隔列表
##spring.thymeleaf.excluded-view-names=
#模板编码
spring.thymeleaf.mode=LEGACYHTML5
# 在构建URL时预先查看名称的前缀
spring.thymeleaf.prefix=classpath:/templates/
# 构建URL时附加查看名称的后缀.
spring.thymeleaf.suffix=.html
# 链中模板解析器的顺序
#spring.thymeleaf.template-resolver-order= o
# 可以解析的视图名称的逗号分隔列表
#spring.thymeleaf.view-names=
# 静态文件请求匹配方式
spring.mvc.static-path-pattern=/**
# 修改默认的静态寻址资源目录
#spring.resources.static-locations = classpath:/templates/,classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/
spring.localFilePath=/Users/liye/Downloads/
spring.resources.static-locations = classpath:/static/,file:${spring.localFilePath}

spring.mybatis.mapperLocations=classpath*:com/fxbank/cap/manager/mapper/xml/*Mapper.xml
spring.mybatis.typeAliasesPackage=com.fxbank.cap.manager.entity

pagehelper.helperDialect=mysql
pagehelper.reasonable=true
pagehelper.supportMethodsArguments=true
pagehelper.params=count=countSql

#主数据库的配置
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource 
spring.datasource.driverClassName =com.mysql.jdbc.Driver
spring.datasource.url = jdbc:mysql://localhost/cap?useUnicode=true&amp;characterEncoding=UTF-8
spring.datasource.username = root
spring.datasource.password = f59UEv1VaKPjQjlwQeqwr91LcJjPKRNQZpgQ9RXMf/mSYBuIUdtTX/TVz14cYYwvrMyHgqMClj+y/xL6sIbRDQ==
spring.datasource.publicKey = MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAIvIIMTheX813ZW0fH4t1i6AoOpPf09iUJL1Na3YHBYEQC0U0oEAR+G1LgJ3l9L1SYzAjhzcQJSTz/DGfqmf9w8CAwEAAQ==
spring.datasource.loginUsername=root
spring.datasource.loginPassword=root

#连接池的补充设置
#初始化、最小、最大
spring.datasource.initialSize = 1
spring.datasource.minIdle = 1
spring.datasource.maxActive = 5
#获取连接等待超时的时间、毫秒（1m）
spring.datasource.maxWait = 60000
#检测关闭空闲连接的间隔时间、毫秒(1m)，当空闲连接大于（minEvictableIdleTimeMillis），则关闭物理连接
spring.datasource.timeBetweenEvictionRunsMillis = 60000
#一个连接在池中最小的生存时间、毫秒(5m)
spring.datasource.minEvictableIdleTimeMillis = 300000
#监控统计拦截的filters,去掉后监控界面sql无法统计，'wall用于防火墙','log4j'用于日志
spring.datasource.druidSysFilters = stat,wall,log4j
#用于检测连接是否有效的语句
spring.datasource.validationQuery=select 1
#检测连接的超时时间、秒
spring.datasource.validationQueryTimeout = 3
#申请连接时，空闲时间大于（timeBetweenEvictionRunsMillis）,则检测连接的有效性
spring.datasource.testWhileIdle = true
#申请连接时，检测连接的有效性（性能损耗）
spring.datasource.testOnBorrow = false
#归还连接时，检测连接的有效性（性能损耗）
spring.datasource.testOnReturn = false

spring.redis.master=mymaster
spring.redis.nodes=127.0.0.1:26379,127.0.0.1:26380,127.0.0.1:26381
#spring.redis.nodes=redis-sentinel-1:26379,redis-sentinel-2:26379,redis-sentinel-3:26379
#spring.redis.nodes=57.25.3.164:26379,57.25.3.165:26379,57.25.3.166:26379
#spring.redis.nodes=57.25.3.116:26379,57.25.3.166:26380,57.25.3.166:26381
# Redis数据库索引（默认为0）
spring.redis.database=1
# Redis服务器连接密码（默认为空）
spring.redis.password=foobared
#spring.redis.password=P@ssw0rd
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.max_active=2
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.max_wait=-1
# 连接池中的最大空闲连接
spring.redis.max_idle=2
# 连接池中的最小空闲连接
spring.redis.min_idle=0
# 连接超时时间（毫秒）
spring.redis.timeout=1000
spring.redis.test_on_borrow=false

#最大连接数
spring.http.maxTotal=100
#并发数
spring.http.defaultMaxPerRoute=20
#创建连接的最长时间
spring.http.connectTimeout=1000
#从连接池中获取到连接的最长时间
spring.http.connectionRequestTimeout=500
#数据传输的最长时间
spring.http.socketTimeout=50000
#提交请求前测试连接是否可用
spring.http.staleConnectionCheckEnabled=true
